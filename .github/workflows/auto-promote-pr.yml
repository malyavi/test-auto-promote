name: Automatic Pipeline Promotion
on:
  pull_request:
    types:
      - closed
    branches:
      - main
if: github.event.pull_request.merged == true

jobs:
  auto-pipeline-promotion:
    runs-on: ubuntu-latest
    steps:
      - name: Run Pipeline Promotion
        uses: actions/github-script@v6
        with:
          script: |
            const promotionBranch = 'staging';
            const {repo, owner} = context.repo;


            const commit = await github.rest.repos.getCommit({
              owner,
              repo,
              ref: context.sha
            });
            const newBranchRef = `auto-promotion/${payload.pull_request.head.ref}`;
            const tempBranchRef = `${newBranchRef}-temp`;

            const promotionBranchCommits = await github.rest.repos.listCommits({
              owner,
              repo,
              sha: promotionBranch
            });

            const branchRef = await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/heads/${tempBranchRef}`,
              sha: promotionBranchCommits.data[0].sha
            });

            const newBranchCommit = await github.rest.repos.getCommit({
              owner,
              repo,
              ref: branchRef.data.object.sha
            });

            const newCommit = await github.rest.git.createCommit({
              owner,
              repo,
              message: payload.pull_request.title,
              tree: newBranchCommit.data.commit.tree.sha,
              parents: [commit.data.parents[0].sha]
            });

            await github.rest.git.updateRef({
              owner,
              repo,
              ref: `heads/${tempBranchRef}`,
              sha: newCommit.data.sha,
              force: true
            });

            let fallback = false;
            try {
              const merge = await github.rest.repos.merge({
                owner,
                repo,
                base: tempBranchRef,
                head: commit.data.sha
              });
              
              const newMergeCommit = await github.rest.git.createCommit({
                owner,
                repo,
                message: `Merge commit for: ${payload.pull_request.title}`,
                tree: merge.data.commit.tree.sha,
                parents: [newBranchCommit.data.sha]
              });
              
              await github.rest.git.updateRef({
                owner,
                repo,
                ref: `heads/${tempBranchRef}`,
                sha: newMergeCommit.data.sha,
                force: true
              });
            } catch (e) {
              fallback = true;
              console.warn(
                'Merge failed, falling back to full merge',
                e
              );
              await github.rest.git.updateRef({
                owner,
                repo,
                ref: `heads/${tempBranchRef}`,
                sha: commit.data.sha,
                force: true
              });
            }

            const tempBranchCommits = await github.rest.repos.listCommits({
              owner,
              repo,
              sha: tempBranchRef
            });

            const prBranchRef = await github.rest.git.createRef({
              owner,
              repo,
              ref: `refs/heads/${newBranchRef}`,
              sha: tempBranchCommits.data[0].sha
            });

            await github.rest.git.deleteRef({
              owner,
              repo,
              ref: `heads/${tempBranchRef}`
            });

            await github.rest.pulls.create({
              title: payload.pull_request.title,
              owner,
              repo,
              head: prBranchRef.data.ref,
              base: promotionBranch,
              body: `Automatically promoted PR from ${payload.pull_request.number}${fallback ? ' - including all prior commits' : ''}`
            });
